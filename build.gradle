import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
	id 'dev.lukebemish.immaculate' version '0.1.8'
	id 'idea'
	id 'net.neoforged.moddev' version "${mdg_version}"
	id 'org.sinytra.adapter.userdev' version "${adapter_version}"
}

tasks.named('wrapper', Wrapper).configure {
	distributionType = Wrapper.DistributionType.BIN
}

base {
	archivesName = "${mod_id}-${minecraft_version}"
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(java_version)
	withSourcesJar()
	withJavadocJar()
}

repositories {
	exclusiveContent {
		forRepository {
			maven {
				name = 'Modrinth'
				url = 'https://api.modrinth.com/maven'
			}
		}
		filter { includeGroupAndSubgroups "maven.modrinth" }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = 'JEI'
				url = 'https://maven.blamejared.com/'
			}
		}
		filter { includeGroupAndSubgroups "mezz.jei" }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = 'playerAnimator'
				url = 'https://maven.kosmx.dev/'
			}
		}
		filter { includeGroupAndSubgroups "dev.kosmx.player-anim" }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = 'SmartBrainLib'
				url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
			}
		}
		filter { includeGroupAndSubgroups "net.tslat.smartbrainlib" }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = 'GeckoLib'
				url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
			}
		}
		filter {
			includeGroupAndSubgroups 'software.bernie.geckolib'
			includeGroupAndSubgroups 'com.eliotlash.mclib'
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				name = 'TslatEntityStatus'
				url = "https://dl.cloudsmith.io/public/tslat/tes/maven/"
			}
		}
		filter { includeGroupAndSubgroups "net.tslat.tes" }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = 'TslatEffectsLib'
				url = "https://dl.cloudsmith.io/public/tslat/tel/maven/"
			}
		}
		filter { includeGroupAndSubgroups "net.tslat.effectslib" }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = 'Modonomicon'
				url = "https://dl.cloudsmith.io/public/klikli-dev/mods/maven/"
			}
		}
		filter { includeGroupAndSubgroups "com.klikli_dev" }
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Sinytra"
				url = "https://maven.su5ed.dev/releases"
			}
		}
		filter { includeGroupAndSubgroups "org.sinytra" }
	}
	maven {
		name = 'LambDynamicLights'
		url = 'https://maven.gegy.dev'
		content {
			includeGroupAndSubgroups("dev.lambdaurora")
		}
	}

	maven {
		name = 'TommyLib'
		url = 'https://dl.cloudsmith.io/public/thomasglasser/tommylib/maven/'
		content {
			includeGroupAndSubgroups("dev.thomasglasser.tommylib")
		}
	}
	maven {
		name = 'Sherds API'
		url = 'https://dl.cloudsmith.io/public/thomasglasser/sherdsapi/maven/'
		content {
			includeGroupAndSubgroups("dev.thomasglasser.sherdsapi")
		}
	}
	maven {
		name = 'NeoForge'
		url = 'https://maven.neoforged.net/releases'
	}
	maven {
		name = 'Mojang Meta'
		url = 'https://maven.neoforged.net/mojang-meta'
	}
	mavenCentral()
	mavenLocal()
}

neoForge {
	version = "${neoforge_version}"

	parchment {
		minecraftVersion = parchment_minecraft_version
		mappingsVersion = parchment_version
	}

	runs {
		configureEach {
			systemProperties.put('terminal.ansi', 'true')
		}
		client {
			client()
			ideName = "Client"
			gameDirectory = project.layout.projectDirectory.dir('runs/client')
		}
		client_alt {
			client()
			ideName = "Client 2"
			gameDirectory = project.layout.projectDirectory.dir('runs/client_alt')
			programArguments.addAll "--username", "DevAlt"
		}
		client_alt_alt {
			client()
			ideName = "Client 3"
			gameDirectory = project.layout.projectDirectory.dir('runs/client_alt_alt')
			programArguments.addAll "--username", "DevAltAlt"
		}
		server {
			server()
			ideName = "Server"
			gameDirectory = project.layout.projectDirectory.dir('runs/server')
		}
		data {
			data()
			ideName = "Data Generation"
			gameDirectory = project.layout.projectDirectory.dir('runs/data')
			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}
	}

	mods {
		minejago {
			sourceSet sourceSets.main
		}
	}
}

configurations {
	runtimeClasspath.extendsFrom localRuntime
}

dependencies {
	additionalRuntimeClasspath "org.sinytra:connector:${connector_version}"

	jarJar implementation("dev.thomasglasser.tommylib:tommylib-neoforge-${minecraft_version}:${tommylib_version}")

	jarJar implementation("maven.modrinth:trimmed:${trimmed_version}+neoforge")

	compileOnly("dev.lambdaurora.lambdynamiclights:lambdynamiclights-api:${lambdynlights_version}") {
		capabilities {
			requireCapability "dev.lambdaurora.lambdynamiclights:api-mojmap"
		}
		transitive = false
	}

	implementation "dev.thomasglasser.sherdsapi:sherdsapi-neoforge-${minecraft_version}:${sherdsapi_version}"
	implementation "net.tslat.smartbrainlib:SmartBrainLib-neoforge-${minecraft_version}:${smartbrainlib_version}"
	implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"
	implementation "net.tslat.tes:TES-neoforge-${minecraft_version}:${tslatentitystatus_version}"
	implementation "net.tslat.effectslib:TslatEffectsLib-neoforge-${previous_minecraft_version}:${tslateffectslib_version}"
//	implementation "net.tslat.effectslib:TslatEffectsLib-neoforge-${minecraft_version}:${tslateffectslib_version}"
	implementation "com.klikli_dev:modonomicon-${minecraft_version}-neoforge:${modonomicon_version}"
    implementation("dev.kosmx.player-anim:player-animation-lib-forge:${playeranimator_version}")
    implementation "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
	implementation "maven.modrinth:jade:${jade_version}+neoforge"

	// Runtime
	localRuntime("dev.lambdaurora.lambdynamiclights:lambdynamiclights-runtime:${lambdynlights_version}") {
		transitive = false
	}
	localRuntime "org.sinytra.forgified-fabric-api:forgified-fabric-api:${ffapi_version}"
	localRuntime "maven.modrinth:worldedit:${worldedit_version}"
	localRuntime "maven.modrinth:huge-structure-blocks:${huge_structure_blocks_version}-neoforge"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
	var replaceProperties = [
			version: project.version,
			group: project.group,
			minecraft_version: minecraft_version,
			next_minecraft_version: next_minecraft_version,
			mod_name: mod_name,
			mod_author: mod_author,
			mod_id: mod_id,
			license: license,
			description: project.description,
			neoforge_version: neoforge_version,
			major_fml_version: major_fml_version,
			contributors: contributors,
			java_version: java_version,
			icon: icon,
			github_name: github_name,
			resource_pack_version: resource_pack_version,
			data_pack_version: data_pack_version,
			tommylib_version: tommylib_version,
			geckolib_version: geckolib_version,
			smartbrainlib_version: smartbrainlib_version,
			sherdsapi_version: sherdsapi_version,
			trimmed_version: trimmed_version,
			tslateffectslib_version: tslateffectslib_version,
			jade_version: jade_version,
			jei_version: jei_version,
			lambdynlights_version: lambdynlights_version,
			modonomicon_version: modonomicon_version,
			playeranimator_version: playeranimator_version,
			tslatentitystatus_version: tslatentitystatus_version
	]

	inputs.properties replaceProperties
	expand replaceProperties
	from "src/main/templates"
	into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
tasks.processResources.dependsOn generateModMetadata

sourceSets.main.resources { srcDir 'src/generated/resources' }

build.dependsOn immaculateCheck

immaculate {
	workflows.register('java') {
		java()
		files.from rootProject.fileTree("src", {
			include "**/*.java"
		})
		noTabs()
		googleFixImports()
		toggleOff = 'spotless:off'
		toggleOn = 'spotless:on'
		eclipse {
			version '3.37.0'
			config = rootProject.file('codeformat/formatter-config.xml')
		}


		// courtesy of diffplug/spotless#240
		// https://github.com/diffplug/spotless/issues/240#issuecomment-385206606
		custom 'noWildcardImports', { String fileContents ->
			if (fileContents.contains('*;\n')) {
				throw new GradleException('No wildcard imports are allowed!')
			}
		}

		custom 'noNotNull', { String fileContents ->
			if (fileContents.contains('@NotNull') || fileContents.contains('@Nonnull')) {
				throw new GradleException('@NotNull and @Nonnull are disallowed.')
			}
		}

		//Trim any trailing whitespace from patch additions
		def trailingWhitespace = Pattern.compile('^\\+.*[ \t]+\$', Pattern.UNIX_LINES | Pattern.MULTILINE)
		custom 'trimTrailingWhitespace', { String fileContents ->
			Matcher matcher = trailingWhitespace.matcher(fileContents)
			StringBuilder sb = new StringBuilder()
			while (matcher.find()) {
				matcher.appendReplacement(sb, matcher.group().trim())
			}
			matcher.appendTail(sb)
			return sb.toString()
		}

		custom 'jetbrainsNullable', { String fileContents ->
			fileContents.replace('javax.annotation.Nullable', 'org.jetbrains.annotations.Nullable')
		}
	}
}

javadoc {
	failOnError = false
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifactId base.archivesName.get()
			from components.java
		}

		maven(MavenPublication) {
			pom {
				name = project.mod_name
				description = project.description
				url = "https://github.com/thomasglasser/${github_name}/wiki"
				licenses {
					license {
						name = project.license
						url = project.license_url
					}
				}
				developers {
					developer {
						id = project.mod_author
						name = project.mod_author
					}
				}
				issueManagement {
					system = 'GitHub'
					url = "https://github.com/thomasglasser/${github_name}/issues"
				}
				scm {
					connection = "scm:git:git://github.com/thomasglasser/${github_name}.git"
					developerConnection = "scm:git:ssh://github.com:thomasglasser/${github_name}.git"
					url = "https://github.com/thomasglasser/${github_name}/tree/${minecraft_version}"
				}
			}
		}
	}

	repositories {
		maven {
			name = "Cloudsmith"
			url = "https://maven.cloudsmith.io/thomasglasser/${mod_id}/"
			credentials {
				username = project.findProperty("CLOUDSMITH_USERNAME") ?: System.getenv("CLOUDSMITH_USERNAME")
				password = project.findProperty("CLOUDSMITH_API_KEY") ?: System.getenv("CLOUDSMITH_API_KEY")
			}
		}
	}
}

signing {
	useGpgCmd()
	sign publishing.publications
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
	configurations."$variant".outgoing {
		capability("$group:${base.archivesName.get()}:$version")
		capability("$group:$mod_id-${project.name}-${minecraft_version}:$version")
		capability("$group:$mod_id:$version")
	}
	publishing.publications.configureEach {
		suppressPomMetadataWarningsFor(variant)
	}
}

jar {
	manifest {
		attributes([
				'Specification-Title'   : mod_name,
				'Specification-Vendor'  : mod_author,
				'Specification-Version' : project.jar.archiveVersion,
				'Implementation-Title'  : project.name,
				'Implementation-Version': project.jar.archiveVersion,
				'Implementation-Vendor' : mod_author,
				'Built-On-Minecraft'    : minecraft_version
		])
	}
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
